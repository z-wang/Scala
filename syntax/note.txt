1. if - else
def abs(x : Int) = if (x>=0) x else -x

2. when defined a val, do calculation when you assign the value
def loop:Boolean = loop
THIS IS OK => def x = loop  -> build another reference to this function
THIS IS NOT OK => val x = loop  -> will value loop when assign

3. call by name vs call by value
#call by value will do calculation when you assign the value
CBN: def xx(x: Boolean, y: => Boolean)
CBY: def xx(x: Boolean, y: Boolean)

4. a function with return value
def sqrt(x: Double): Double = ...
//Newton's method on square roots
def sqrtIter(guess: Double, x: Double): Double = 
  if (isGoodEnough(guess, x)) guess
  else sqrtIter(imporve(guess, x), x)
  
def isGoodEnough(guess: Double, x: Double) = 
  abs(guess * guess - x) / x < 0.01
  
def imporve(guess: Double, x: Double) = 
  (guess + x / guess) / 2
  
def sqrt(x : Double) = sqrtIter(1.0, x)

5. numbers
0.001
0.1e-20
1.0e20

6. avoid namespace polution
Blocks in Scala
def sqrt(x : Double) =  {
  def sqrt(x: Double): Double = ...
  //Newton's method on square roots
  def sqrtIter(guess: Double, x: Double): Double = 
    if (isGoodEnough(guess, x)) guess
    else sqrtIter(imporve(guess, x), x)
  
  def isGoodEnough(guess: Double, x: Double) = 
    abs(guess * guess - x) / x < 0.01
  
  def imporve(guess: Double, x: Double) = 
    (guess + x / guess) / 2
  
  sqrtIter(1.0, x)
}

7. multi line
(someLongExpr
+ someOtherExpr)

someLongExpr + 
someOtherExpr

8. tail recursion
#gcd Euclid's algorithm
def gcd(a: Int, b: Int): Int =
  if (b == 0) a else gcd(b, a % b)

def factorial(n: Int): Int =
  if (n == 0) 1 else n * factorial(n - 1)

!!if a function calls itself as its last action, the function's stack frame can be reused and it is TAIL RECURSION
TAIL RECURSION FUNCTIONS ARE ITERATIVE PROCESSES
So, because for gcd the last call is gcd itself and for factorial one still needs to use n to * factorial, which is not a tail recursion

@tailrec
def gcd(a: Int, b: Int): Int = ...

@tailrec
def factorial(n : Int): Int = {
  def loop(acc: Int, n: Int): Int =
    if (n == 0) acc
    else loop(acc * n, n - 1)
  loop(1, n)
}

9. First-Class Values
functional languages treat functions as first-class values
functions that talk other functions as parameters or that retur functions as results are called higher order functions.

def cube(x: Int) : Int = x * x * x
def sumCubes(a: Int, b: Int): Int = 
  if ( a > b ) 0 else cube(a) + sumCubes(a + 1, b)

Int => Int, is the function way of define

Anonymous Function: syntactic sugar!
(x: Int) => x * x * x
(x1 : T1, ... , xn : Tn) => E
is the same as : def f(x1 : T1, ..., xn : Tn) = E; f

example:
a linear recursion to this tail-recursion:
def sum(f: Int => Int)(a: Int, b: Int): Int = {
  def loop(a: Int, acc: Int): Int = {
    if( a > b) acc
    else loop(a + 1, f(a) + acc)
  }
  loop(a, 0)
}
sum(x=> x * x, 3, 5)    ... 15



